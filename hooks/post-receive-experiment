#!/usr/bin/env python

import sys
import os
import re

from subprocess import Popen, PIPE, call
from datetime import datetime
from operator import itemgetter

import trac
import time
import ConfigParser as parser

pathdir = os.path.dirname(os.path.realpath(__file__)).strip()

ppwd = Popen(['pwd'],stdout=PIPE,shell=True)
pwd = ppwd.communicate()[0]
ppwd.stdout.close()
pwd = pwd.strip()

pgetrepo = Popen(['basename %s' % pwd], stdout=PIPE,shell=True)
repository = pgetrepo.communicate()[0]
pgetrepo.stdout.close()

repository = repository.strip()
configfile = "%s/configs/%s" % (pathdir,repository)
configfile = configfile.strip()
config = parser.ConfigParser()
config.read(configfile)

repository = repository.replace('.git','')

trac_envs_raw_list = config.get("common","trac_environments")
trac_envs_raw = trac_envs_raw_list.split(',')
trac_envs = []
trac_allowed = []

for trac_env in trac_envs_raw:
    trac_env = trac_env.strip()
    trac_envs.append(trac_env)
    trac_name = trac_env.split('/')
    trac_name = trac_name.pop()
    trac_allowed.append(trac_name)

trac_default_raw = config.get("common","trac_env_default")
trac_default = trac_default_raw.strip()
TRAC_ENV = trac_default
GIT_PATH = '/usr/bin/git'

if not 'PYTHON_EGG_CACHE' in os.environ:
    os.environ['PYTHON_EGG_CACHE'] = '/tmp/.egg-cache'

ticket_prefix = '(?:#|(?:ticket|issue|bug)[: ]?)'
ticket_reference = ticket_prefix + '[0-9]+'
ticket_command =  (r'(?P<action>[A-Za-z]*).?'
                   '(?P<ticket>%s(?:(?:[, &]*|[ ]?and[ ]?)%s)*)' %
                   (ticket_reference, ticket_reference))
command_re = re.compile(ticket_command)
ticket_re = re.compile(ticket_prefix + '([0-9]+)')
hours_re = re.compile("worked\s*(?P<hours>[0-9.]+)h")


def call_git(command, args):
    pgit =  Popen([GIT_PATH, command] + args, stdout=PIPE)
    result = pgit.communicate()[0]
    pgit.stdout.close()
    return result


def save_ticket_change( db, ticket_id, author, change_time, field, oldvalue, newvalue, dontinsert=False):
    cursor = db.cursor();
    cursor.execute("""INSERT INTO ticket_change  (ticket,time,author,field, oldvalue, newvalue)
        VALUES(%s, %s, %s, %s, %s, %s)""",
        (ticket_id, change_time, author, field, oldvalue, newvalue))
    db.commit()


def handle_commit(commit, ref):
    from trac.ticket.notification import TicketNotifyEmail
    from trac.ticket import Ticket
    from trac.ticket.web_ui import TicketModule
    from trac.util.text import to_unicode
    from trac.util.datefmt import utc
    from trac.env import open_environment
    import time

    msg = to_unicode(call_git('rev-list', ['-n', '1', commit, '--pretty=medium']).rstrip())
    eml = to_unicode(call_git('rev-list', ['-n', '1', commit, '--pretty=format:%ae']).splitlines()[1])
    username = eml[0:eml.index('@')]
    now = datetime.now(utc)
    content = msg.split('\n\n', 1)[1]
    tickets = {}

    comment = """\
In [changeset:"%s/%s"]:
{{{
#!CommitTicketReference repository="%s" revision="%s"
%s
}}}
""" % (commit,repository,repository,commit,msg)

    tickets = re.findall(ticket_command,comment)
    ticketsit = iter(tickets)
    
    for tkt_id in ticketsit:
        utn = str(tkt_id[0])
        if utn in trac_allowed:
            tkt = tkt_id[1]
            tkt = str(tkt)
            tkt = tkt.replace('#','')
            env = open_environment('/var/www/trac/%s' % utn)
            db = env.get_db_cnx()
            save_ticket_change(db,int(tkt),username,int("%.0f" % (time.time()*1000000)),'comment','4',comment)


def handle_ref(old, new, ref):
    if new == '0' * 40:
		return
    args = (old == '0' * 40) and [new] or [new, '^' + old]
    pending_commits = call_git('rev-list', args).splitlines()
    for commit in pending_commits:
        handle_commit(commit, ref)


if __name__ == '__main__':

    lines = sys.stdin

    for line in sys.stdin:
        handle_ref(*line.split())

    print "Repository: %s" % repository

    if repository == 'usap-git-acl':
        pcheckout = Popen(["GIT_WORK_TREE=/data/usap-git-acl git checkout -f master"], stdout=PIPE, shell=True)
        output = pcheckout.communicate()[0]
        ret = pcheckout.returncode
        print "Git checkout return code: %d" % ret
        if ret == 0:
            print "The checkout has been executed successfully."

        pcheckout.stdout.close()
